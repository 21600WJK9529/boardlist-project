/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projectfinal.LoadingScreen;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Matthew
 */
public class Stats extends javax.swing.JFrame {

    /**
     * Creates new form Stats
     */
    public Stats() {
        initComponents();
        statCount();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        getting = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        averageInt = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        DistinctNumber = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        Failures = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        highMark = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lowMark = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        stdev = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        studentNumber = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        isFound = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(51, 102, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Stats");

        getting.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getting.setForeground(new java.awt.Color(255, 255, 255));
        getting.setText("jLabel2");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("<");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(getting)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(getting)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        jLabel3.setText("Average of Final Marks : ");

        averageInt.setText("Average Int");

        jLabel5.setText("Number of Distinctions  :");

        DistinctNumber.setText("DistinctNumber");

        jLabel7.setText("Number of Failures        :");

        Failures.setText("Failures");

        jLabel9.setText("Highest Mark     :");

        highMark.setText("High mark");

        jLabel11.setText("Lowest Mark      :");

        lowMark.setText("low Mark");

        jButton1.setText("Failures");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Distinctions");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student_Name", "Student_Num", "Subject", "Year_Mark", "Final_Mark", "SYM", "Class"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel4.setText("Stand deviation :");

        stdev.setText("sstdev");

        jButton3.setText("Needs Checking");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel6.setText("Click table headers to sort");

        jLabel8.setText("Search a Student...");

        jLabel10.setText("Enter Student Number :");

        studentNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentNumberActionPerformed(evt);
            }
        });

        jButton4.setText("Search");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        isFound.setText("results found :");

        jLabel12.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(averageInt)
                            .addComponent(DistinctNumber)
                            .addComponent(Failures))
                        .addGap(84, 84, 84)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel11))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(highMark)
                                    .addComponent(lowMark))
                                .addGap(118, 118, 118)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(isFound)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel12)))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(studentNumber)))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(stdev))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addComponent(jLabel6))
                .addContainerGap(46, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(averageInt)
                    .addComponent(jLabel9)
                    .addComponent(highMark)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(DistinctNumber)
                    .addComponent(jLabel11)
                    .addComponent(lowMark)
                    .addComponent(jLabel10)
                    .addComponent(studentNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(Failures)
                    .addComponent(jLabel4)
                    .addComponent(stdev))
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(isFound, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        HomeScreen home = new HomeScreen();
        home.setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        File check = new File("publisher.mdb");

        if (!check.exists()) {
            JOptionPane.showMessageDialog(null, "Database does not exist");

            new HomeScreen();
            dispose();
        } else {

            try {
                String retrieve_Values_qry = "SELECT * FROM TESTIP1 WHERE Final_Mark < 50";
                //String filename = "publisher.mdb";
                String dbURL = "jdbc:ucanaccess://publisher.mdb";//specify the full pathname of the database
                //dbURL+= filename.trim() + ";DriverID=22;READONLY=true}"; 
                String driverName = "net.ucanaccess.jdbc.UcanaccessDriver";

                Class.forName(driverName);

                getting.setText("Connecting ...");
                Connection con = DriverManager.getConnection(dbURL);

       // create a java.sql.Statement so we can run queries
                Statement s = con.createStatement();

                getting.setText("Getting values ...");
//        s.executeUpdate(insert_Values_stmt); // execute the SQL statement
                ResultSet rs = s.executeQuery(retrieve_Values_qry); // select the data from the table

//        ResultSet rs = s.getResultSet(); // get any ResultSet that came from our query
                if (rs != null) // if rs == null, then there is no ResultSet to view        
                {   DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                    model.setRowCount(0);
                    while (rs.next()) // this will step through our data row-by-row
                    {
                        
                        Object[] row = { rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8)};
                        
                        
                        model.addRow(row);
                    }
                }

                getting.setText("Database Loaded");
                s.close(); // close the Statement to let the database know we're done with it
                con.close(); // close the Connection to let the database know we're done with it

            } catch (Exception err) {
                System.out.println("ERROR: " + err);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         File check = new File("publisher.mdb");

        if (!check.exists()) {
            JOptionPane.showMessageDialog(null, "Database does not exist");

            new HomeScreen();
            dispose();
        } else {

            try {
                String retrieve_Values_qry = "SELECT * FROM TESTIP1 WHERE Final_Mark > 74";
                //String filename = "publisher.mdb";
                String dbURL = "jdbc:ucanaccess://publisher.mdb";//specify the full pathname of the database
                //dbURL+= filename.trim() + ";DriverID=22;READONLY=true}"; 
                String driverName = "net.ucanaccess.jdbc.UcanaccessDriver";

                Class.forName(driverName);

                getting.setText("Connecting ...");
                Connection con = DriverManager.getConnection(dbURL);

       // create a java.sql.Statement so we can run queries
                Statement s = con.createStatement();

                getting.setText("Getting values ...");
//        s.executeUpdate(insert_Values_stmt); // execute the SQL statement
                ResultSet rs = s.executeQuery(retrieve_Values_qry); // select the data from the table

//        ResultSet rs = s.getResultSet(); // get any ResultSet that came from our query
                if (rs != null) // if rs == null, then there is no ResultSet to view        
                {   DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                    model.setRowCount(0);
                    while (rs.next()) // this will step through our data row-by-row
                    {
                        Object[] row = { rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8)};
                       
                        model.addRow(row);
                    }
                }

                getting.setText("Database Loaded");
                s.close(); // close the Statement to let the database know we're done with it
                con.close(); // close the Connection to let the database know we're done with it

            } catch (Exception err) {
                System.out.println("ERROR: " + err);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
         File check = new File("publisher.mdb");

        if (!check.exists()) {
            JOptionPane.showMessageDialog(null, "Database does not exist");

            new HomeScreen();
            dispose();
        } else {

            try {
                String retrieve_Values_qry = "SELECT * FROM TESTIP1 WHERE CLASS = 'B' OR CLASS = 'A' OR CLASS = 'C' OR CLASS = 'D' OR CLASS = 'E'";
                //String filename = "publisher.mdb";
                String dbURL = "jdbc:ucanaccess://publisher.mdb";//specify the full pathname of the database
                //dbURL+= filename.trim() + ";DriverID=22;READONLY=true}"; 
                String driverName = "net.ucanaccess.jdbc.UcanaccessDriver";

                Class.forName(driverName);

                getting.setText("Connecting ...");
                Connection con = DriverManager.getConnection(dbURL);

       // create a java.sql.Statement so we can run queries
                Statement s = con.createStatement();

                getting.setText("Getting values ...");
//        s.executeUpdate(insert_Values_stmt); // execute the SQL statement
                ResultSet rs = s.executeQuery(retrieve_Values_qry); // select the data from the table

//        ResultSet rs = s.getResultSet(); // get any ResultSet that came from our query
                if (rs != null) // if rs == null, then there is no ResultSet to view        
                {    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                    model.setRowCount(0);
                    while (rs.next()) // this will step through our data row-by-row
                    {   
                        
                        Object[] row = { rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8)};
                        
                        model.addRow(row);
                    }
                }

                getting.setText("Database Loaded");
                s.close(); // close the Statement to let the database know we're done with it
                con.close(); // close the Connection to let the database know we're done with it

            } catch (Exception err) {
                System.out.println("ERROR: " + err);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void studentNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studentNumberActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String stuNum = studentNumber.getText().trim();
        
        File check = new File("publisher.mdb");

        if (!check.exists()) {
            JOptionPane.showMessageDialog(null, "Database does not exist");

            new HomeScreen();
            dispose();
        } else {

            try {
                String retrieve_Values_qry = "SELECT * FROM TESTIP1 WHERE Number = '"+stuNum+"'";
                String retrieve_Values_qry2 = "SELECT COUNT(Number) FROM TESTIP1 WHERE Number = '"+stuNum+"'";
                //String filename = "publisher.mdb";
                String dbURL = "jdbc:ucanaccess://publisher.mdb";//specify the full pathname of the database
                //dbURL+= filename.trim() + ";DriverID=22;READONLY=true}"; 
                String driverName = "net.ucanaccess.jdbc.UcanaccessDriver";

                Class.forName(driverName);

                getting.setText("Connecting ...");
                Connection con = DriverManager.getConnection(dbURL);

       // create a java.sql.Statement so we can run queries
                Statement s = con.createStatement();

                getting.setText("Getting values ...");
//        s.executeUpdate(insert_Values_stmt); // execute the SQL statement
                ResultSet rs = s.executeQuery(retrieve_Values_qry); // select the data from the table
                ResultSet count = s.executeQuery(retrieve_Values_qry2); // select the data from the table
//        ResultSet rs = s.getResultSet(); // get any ResultSet that came from our query
                if (rs != null && count.next()) // if rs == null, then there is no ResultSet to view        
                {    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                     model.setRowCount(0);
                     int lm = ((Number)count.getObject(1)).intValue();
                     jLabel12.setText(String.valueOf(lm));
                    while (rs.next()) // this will step through our data row-by-row
                    {   
                        
                        Object[] row = { rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8)};
                        
                        model.addRow(row);
                    }
                }else{
                    
                }

                getting.setText("Database Loaded");
                s.close(); // close the Statement to let the database know we're done with it
                con.close(); // close the Connection to let the database know we're done with it

            } catch (Exception err) {
                System.out.println("ERROR: " + err);
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    public void statCount(){
        
        
        File check = new File("publisher.mdb");

        if (!check.exists()) {
            JOptionPane.showMessageDialog(null, "Database does not exist");

            new HomeScreen();
            dispose();
        } else {

            try {
                String retrieve_Values_qry = "SELECT MAX(Final_Mark)  FROM TESTIP1";
                String retrieve_Values_qry2 = "SELECT MIN(Final_Mark)  FROM TESTIP1";
                String retrieve_Values_qry3 = "SELECT AVG(Final_Mark)  FROM TESTIP1";
                String retrieve_Values_qry4 = "SELECT COUNT(Final_Mark)  FROM TESTIP1 WHERE Final_Mark >= 75";
                String retrieve_Values_qry5 = "SELECT COUNT(Final_Mark)  FROM TESTIP1 WHERE Final_Mark < 50";
                String retrieve_Values_qry6 = "SELECT STDEV([Final_Mark])  FROM TESTIP1";
                //String filename = "publisher.mdb";
                String dbURL = "jdbc:ucanaccess://publisher.mdb";//specify the full pathname of the database
                //dbURL+= filename.trim() + ";DriverID=22;READONLY=true}"; 
                String driverName = "net.ucanaccess.jdbc.UcanaccessDriver";

                Class.forName(driverName);

                getting.setText("Connecting ...");
                Connection con = DriverManager.getConnection(dbURL);

       // create a java.sql.Statement so we can run queries
                Statement s = con.createStatement();

                getting.setText("Getting values ...");

                ResultSet rs = s.executeQuery(retrieve_Values_qry); // select the data from the table
                ResultSet ls = s.executeQuery(retrieve_Values_qry2);
                ResultSet avg = s.executeQuery(retrieve_Values_qry3);
                ResultSet dis = s.executeQuery(retrieve_Values_qry4);
                ResultSet fail = s.executeQuery(retrieve_Values_qry5);
                ResultSet stand = s.executeQuery(retrieve_Values_qry6);
                if (rs.next() && ls.next() && avg.next() && dis.next() && fail.next() && stand.next()) // if rs == null, then there is no ResultSet to view        
                {
                   int hm = ((Number)rs.getObject(1)).intValue();
                   int lm = ((Number)ls.getObject(1)).intValue();
                   int d = ((Number)dis.getObject(1)).intValue();
                   int f = ((Number)fail.getObject(1)).intValue();
                   long standard = ((Number)stand.getObject(1)).intValue();
                   double av = ((Number)avg.getObject(1)).intValue();
                   Failures.setText(String.valueOf(f));
                   highMark.setText(String.valueOf(hm));
                   lowMark.setText(String.valueOf(lm));
                   averageInt.setText(String.valueOf(av));
                   DistinctNumber.setText(String.valueOf(d));
                   stdev.setText(String.valueOf(standard));
                }

                getting.setText("Database Loaded");
                s.close(); // close the Statement to let the database know we're done with it
                con.close(); // close the Connection to let the database know we're done with it

            } catch (Exception err) {
                System.out.println("ERROR: " + err);
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Stats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Stats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Stats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Stats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Stats().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JLabel DistinctNumber;
    javax.swing.JLabel Failures;
    javax.swing.JLabel averageInt;
    javax.swing.JLabel getting;
    javax.swing.JLabel highMark;
    javax.swing.JLabel isFound;
    javax.swing.JButton jButton1;
    javax.swing.JButton jButton2;
    javax.swing.JButton jButton3;
    javax.swing.JButton jButton4;
    javax.swing.JLabel jLabel1;
    javax.swing.JLabel jLabel10;
    javax.swing.JLabel jLabel11;
    javax.swing.JLabel jLabel12;
    javax.swing.JLabel jLabel2;
    javax.swing.JLabel jLabel3;
    javax.swing.JLabel jLabel4;
    javax.swing.JLabel jLabel5;
    javax.swing.JLabel jLabel6;
    javax.swing.JLabel jLabel7;
    javax.swing.JLabel jLabel8;
    javax.swing.JLabel jLabel9;
    javax.swing.JPanel jPanel1;
    javax.swing.JPanel jPanel2;
    javax.swing.JScrollPane jScrollPane1;
    javax.swing.JTable jTable1;
    javax.swing.JLabel lowMark;
    javax.swing.JLabel stdev;
    javax.swing.JTextField studentNumber;
    // End of variables declaration//GEN-END:variables
}
